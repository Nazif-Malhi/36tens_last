{"version":3,"file":"static/js/416.0d3309fa.chunk.js","mappings":"8SAeMA,EAAwBC,EAAAA,QAAAA,IAAU,olDA8ElCC,EAAgBD,EAAAA,QAAAA,IAAU,0JAQ1BE,EAAQ,CAAC,eAAgB,UAAW,SAAU,QAqIpD,UAnIqB,WACnB,OAA0DC,EAAAA,EAAAA,UAAS,GAAE,eAA9DC,EAAqB,KAAEC,EAAwB,KACtD,GAAsCF,EAAAA,EAAAA,UAAS,GAAE,eAA1CG,EAAW,KAAEC,EAAc,KAClC,GAAwCJ,EAAAA,EAAAA,WAAS,GAAM,eAAhDK,EAAa,KAAEC,EAAc,KAE9BC,EAAa,WACbN,EAAwBO,EAAAA,GAAAA,OAA2B,EACrDN,EAAyBD,EAAwB,GAExCA,IAA0BO,EAAAA,GAAAA,OAA2B,IAC1C,IAAhBL,GACFG,GAAe,GACfF,EAAeD,EAAc,GAC7BM,QAAQC,IAAIP,IACa,IAAhBA,GACTG,GAAe,GACfF,EAAeD,EAAc,IACJ,IAAhBA,GACTC,EAAeD,EAAc,GAE/BM,QAAQC,IAAIP,GAEhB,EACMQ,EAAa,WAKbR,EAAc,EACI,IAAhBA,GACFC,EAAeD,EAAc,GAC7BM,QAAQC,IAAIP,IACa,IAAhBA,GACTC,EAAeD,EAAc,GAC7BG,GAAe,IACU,IAAhBH,IACTG,GAAe,GACfF,EAAeD,EAAc,IAEN,IAAhBA,GACLF,EAAwB,GAC1BC,EAAyBD,EAAwB,EAGvD,EAMA,OACE,UAACL,EAAqB,YACpB,UAAC,IAAG,CAACgB,UAAU,SAAQ,WACrB,SAAC,IAAG,CAACA,UAAU,QAAO,UACpB,gDAEF,SAAC,IAAG,CAACA,UAAU,UAAS,UACtB,SAAC,IAAG,CAACC,GAAI,CAAEC,MAAO,OAAQC,UAAW,QAAS,UAC5C,SAAC,IAAO,CAACC,WAAYb,EAAac,kBAAgB,WAC/ClB,EAAMmB,KAAI,SAACC,EAAOC,GAAK,OACtB,SAAC,IAAI,WACH,SAAC,IAAS,UAAED,KADHC,EAEJ,cAMjB,UAAC,IAAG,CAACR,UAAU,OAAM,WACnB,SAAC,IAAG,CAACA,UAAU,mBAAkB,SAC9BJ,EAAAA,GAAAA,KAAsB,SAACa,EAAOD,GAC7B,OACE,SAAC,IAAiB,CAEhBA,MAAOA,EACPE,MAAOD,EAAME,gBACbC,SAAUH,EAAMI,cAHXL,EAMX,OAEF,UAAC,IAAG,CAACR,UAAU,QAAO,UACH,IAAhBT,GACC,SAAC,IAAmB,CAClBiB,MAAOnB,EACPyB,YAvCQ,SAACC,GACnBlB,QAAQC,IAAIiB,EACd,IAuC4B,IAAhBxB,GACF,SAAC,IAAM,IACW,IAAhBA,GACF,SAAC,IAAI,IACH,MACJ,SAAC,IAAG,CAACyB,MAAO,CAAEd,MAAO,OAAQe,eAAgB,UAAW,UACtD,UAAC/B,EAAa,YACZ,UAAC,IAAY,CACXgC,KAAI,6BACF7B,EAAwB,EAAI,KAAO,YAErCa,MAAM,QACNiB,OAAO,OACPC,QAAS,WACPrB,GACF,EAAE,WAEF,SAAC,MAAa,CAACiB,MAAO,CAAEK,SAAU,YAAc,qBAElD,UAAC,IAAY,CACXH,KAAI,6BACF3B,EAAc,EAAI,KAAO,YAE3BW,MAAM,QACNiB,OAAO,OACPC,QAAS,WACPzB,GACF,EAAE,wBAEQ,SAAC,MAAc,CAACqB,MAAO,CAAEK,SAAU,2BAMvD,SAAC,KAAgB,CACfC,KAAM7B,EACN8B,OAAQ,kBAAMxB,GAAY,EAC1ByB,UAAW,kBAAM7B,GAAY,MAIrC,C","sources":["layouts/admin/Competencies.jsx"],"sourcesContent":["import { Box, Step, StepLabel, Stepper } from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n// import { competencies_data } from \"../../assets/Data/OrdinalCompetencies\";\r\nimport { BiChevronLeft, BiChevronRight } from \"react-icons/bi\";\r\nimport CustomButton from \"../../components/buttons/Custombutton\";\r\nimport CompetenciesCards from \"../../components/cards/CompetenciesCards\";\r\nimport BuisnessImpactScale from \"../../components/cards/BuisnessImpactScale\";\r\n// import PreviewQuestions from \"../../components/modals/PreviewQuestions\";\r\nimport Assign from \"../../components/cards/Assign\";\r\nimport Done from \"../../components/cards/Done\";\r\nimport { competencies_data } from \"../../assets/data\";\r\nimport { PreviewQuestions } from \"../../components/modal\";\r\n\r\nconst CompetenciesContainer = styled.div`\r\n  width: 100%;\r\n  height: auto;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  background: #f7f8fa;\r\n  .header {\r\n    width: 100%;\r\n    height: auto;\r\n    margin-bottom: 10px;\r\n    padding: 0px;\r\n    @media screen and (max-width: 925px) {\r\n      justify-content: center;\r\n      flex-direction: column;\r\n    }\r\n    h2 {\r\n      color: #979797;\r\n    }\r\n    .title {\r\n      display: flex;\r\n      align-items: center;\r\n      max-width: 400px;\r\n      justify-content: center;\r\n\r\n      @media screen and (max-width: 925px) {\r\n        justify-content: center;\r\n        max-width: 100%;\r\n      }\r\n    }\r\n    .stepper {\r\n      display: flex;\r\n      justify-content: start;\r\n      align-items: start;\r\n    }\r\n  }\r\n  .body {\r\n    width: 100%;\r\n    height: auto;\r\n    @media screen and (max-width: 925px) {\r\n      justify-content: center;\r\n      flex-direction: column;\r\n    }\r\n    .slider-questions {\r\n      /* width */\r\n      ::-webkit-scrollbar {\r\n        width: 3px;\r\n      }\r\n\r\n      /* Track */\r\n      ::-webkit-scrollbar-track {\r\n        background: #f1f1f1;\r\n      }\r\n\r\n      /* Handle */\r\n      ::-webkit-scrollbar-thumb {\r\n        background: #a600a0;\r\n      }\r\n\r\n      /* Handle on hover */\r\n      ::-webkit-scrollbar-thumb:hover {\r\n        background: #34485f;\r\n      }\r\n      @media screen and (max-width: 925px) {\r\n        max-width: 100%;\r\n      }\r\n      max-width: 400px;\r\n      overflow-y: scroll;\r\n      height: 360px;\r\n    }\r\n    .cards {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      flex-direction: column;\r\n    }\r\n  }\r\n`;\r\nconst MasterButtons = styled.div`\r\n  width: 100%;\r\n  margin-top: 20px;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  height: 50px;\r\n`;\r\nconst steps = [\"Impact Scale\", \"Preview\", \"Assign\", \"Done\"];\r\n\r\nconst Competencies = () => {\r\n  const [index0fCompetencyType, setIndexOfCompetencyType] = useState(0);\r\n  const [indexOfCard, setIndexOfCard] = useState(0);\r\n  const [isShowPreview, setShowPreview] = useState(false);\r\n\r\n  const handleNext = () => {\r\n    if (index0fCompetencyType < competencies_data.length - 1) {\r\n      setIndexOfCompetencyType(index0fCompetencyType + 1);\r\n      // console.log(index0fCompetencyType);\r\n    } else if (index0fCompetencyType === competencies_data.length - 1) {\r\n      if (indexOfCard === 0) {\r\n        setShowPreview(true);\r\n        setIndexOfCard(indexOfCard + 1);\r\n        console.log(indexOfCard);\r\n      } else if (indexOfCard === 1) {\r\n        setShowPreview(false);\r\n        setIndexOfCard(indexOfCard + 1);\r\n      } else if (indexOfCard === 2) {\r\n        setIndexOfCard(indexOfCard + 1);\r\n      }\r\n      console.log(indexOfCard);\r\n    }\r\n  };\r\n  const handleBack = () => {\r\n    // if (index0fCompetencyType > 0) {\r\n    //   setIndexOfCompetencyType(index0fCompetencyType - 1);\r\n    // } else\r\n\r\n    if (indexOfCard > 0) {\r\n      if (indexOfCard === 3) {\r\n        setIndexOfCard(indexOfCard - 1);\r\n        console.log(indexOfCard);\r\n      } else if (indexOfCard === 2) {\r\n        setIndexOfCard(indexOfCard - 1);\r\n        setShowPreview(true);\r\n      } else if (indexOfCard === 1) {\r\n        setShowPreview(false);\r\n        setIndexOfCard(indexOfCard - 1);\r\n      }\r\n    } else if (indexOfCard === 0) {\r\n      if (index0fCompetencyType > 0) {\r\n        setIndexOfCompetencyType(index0fCompetencyType - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleScale = (list) => {\r\n    console.log(list);\r\n  };\r\n\r\n  return (\r\n    <CompetenciesContainer>\r\n      <Row className=\"header\">\r\n        <Col className=\"title\">\r\n          <h2>Competency Types</h2>\r\n        </Col>\r\n        <Col className=\"stepper\">\r\n          <Box sx={{ width: \"100%\", marginTop: \"30px\" }}>\r\n            <Stepper activeStep={indexOfCard} alternativeLabel>\r\n              {steps.map((label, index) => (\r\n                <Step key={index}>\r\n                  <StepLabel>{label}</StepLabel>\r\n                </Step>\r\n              ))}\r\n            </Stepper>\r\n          </Box>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"body\">\r\n        <Col className=\"slider-questions\">\r\n          {competencies_data.map((value, index) => {\r\n            return (\r\n              <CompetenciesCards\r\n                key={index}\r\n                index={index}\r\n                title={value.competency_type}\r\n                question={value.competencies}\r\n              />\r\n            );\r\n          })}\r\n        </Col>\r\n        <Col className=\"cards\">\r\n          {indexOfCard === 0 ? (\r\n            <BuisnessImpactScale\r\n              index={index0fCompetencyType}\r\n              handleScale={handleScale}\r\n            />\r\n          ) : indexOfCard === 2 ? (\r\n            <Assign />\r\n          ) : indexOfCard === 3 ? (\r\n            <Done />\r\n          ) : null}\r\n          <Row style={{ width: \"100%\", justifyContent: \"center\" }}>\r\n            <MasterButtons>\r\n              <CustomButton\r\n                type={`normal textnormal  ${\r\n                  index0fCompetencyType > 0 ? null : \"disabled\"\r\n                }`}\r\n                width=\"160px\"\r\n                height=\"40px\"\r\n                onClick={() => {\r\n                  handleBack();\r\n                }}\r\n              >\r\n                <BiChevronLeft style={{ fontSize: \"1.5rem\" }} /> Previous Step\r\n              </CustomButton>\r\n              <CustomButton\r\n                type={`normal textnormal  ${\r\n                  indexOfCard < 3 ? null : \"disabled\"\r\n                }`}\r\n                width=\"140px\"\r\n                height=\"40px\"\r\n                onClick={() => {\r\n                  handleNext();\r\n                }}\r\n              >\r\n                Next Step <BiChevronRight style={{ fontSize: \"1.5rem\" }} />\r\n              </CustomButton>\r\n            </MasterButtons>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n      <PreviewQuestions\r\n        show={isShowPreview}\r\n        onHide={() => handleBack()}\r\n        onProceed={() => handleNext()}\r\n      />\r\n    </CompetenciesContainer>\r\n  );\r\n};\r\n\r\nexport default Competencies;\r\n"],"names":["CompetenciesContainer","styled","MasterButtons","steps","useState","index0fCompetencyType","setIndexOfCompetencyType","indexOfCard","setIndexOfCard","isShowPreview","setShowPreview","handleNext","competencies_data","console","log","handleBack","className","sx","width","marginTop","activeStep","alternativeLabel","map","label","index","value","title","competency_type","question","competencies","handleScale","list","style","justifyContent","type","height","onClick","fontSize","show","onHide","onProceed"],"sourceRoot":""}