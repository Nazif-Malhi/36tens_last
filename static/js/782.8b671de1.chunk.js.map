{"version":3,"file":"static/js/782.8b671de1.chunk.js","mappings":"sJAEaA,E,QAAYC,QAAAA,IAAU,8uB,oICiHnC,UAnGe,WACb,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAyCC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,MAAM,IAApEA,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAASC,EAAW,EAAXA,YACzB,GAA8BC,EAAAA,EAAAA,UAAS,IAAG,eAAnCC,EAAO,KAAEC,EAAU,KAC1B,GAAkCF,EAAAA,EAAAA,UAAS,IAAG,eAAvCG,EAAS,KAAEC,EAAY,KAC9B,GAAoBJ,EAAAA,EAAAA,UAAS,GAAE,eAAxBK,EAAE,KAAEC,EAAK,KAGhB,GAAoCN,EAAAA,EAAAA,WAAS,GAAM,eAA5CO,EAAU,KAAEC,EAAa,MAChCC,EAAAA,EAAAA,YAAU,WACRhB,GAASiB,EAAAA,EAAAA,OACLX,IACFY,QAAQC,IAAIb,GACZN,GAASoB,EAAAA,EAAAA,OAEb,GAAG,CAACpB,IA+BJ,OACE,UAAC,IAAS,YACR,SAAC,IAAG,CAACqB,UAAU,SAAQ,UACrB,UAAC,IAAG,CAACA,UAAU,aAAY,WACzB,SAAC,IAAG,CAACA,UAAU,QAAO,UACpB,sCAEF,SAAC,IAAG,CAACA,UAAW,oBAAoB,UAClC,UAAC,KAAY,CACXC,KAAM,kCACNC,MAAM,QACNC,OAAO,OACPC,QAAS,WACPV,GAAc,GACdN,EAAW,QACb,EAAE,WAEF,SAAC,MAAa,CAACiB,SAAU,WAAY,yBAK7C,SAAC,IAAG,CAACL,UAAU,OAAM,UACnB,SAAC,KAAY,CACXM,aAAc,SAACC,IA/CF,SAACA,GACpB5B,GAAS6B,EAAAA,EAAAA,IAAYD,GACvB,CA8CUD,CAAaC,EACf,EACAE,WAAY,SAACC,EAAMnB,IAxDR,SAACmB,EAAMnB,GACxBD,EAAaoB,GACblB,EAAMD,GACNH,EAAW,UACXM,GAAc,EAChB,CAoDUe,CAAWC,EAAMnB,EACnB,EACAoB,KAAO3B,EAtEJ,GAsEcD,EACjB6B,QAAS5B,OAGb,SAAC,KAAgB,CACf6B,KAAMpB,EACNqB,OAAQ,WACNpB,GAAc,GACdN,EAAW,GACb,EACA2B,IAAK,SACLC,WAAY,aACZ7B,QAASA,EACT8B,YAAa5B,EACb6B,KAAMnC,EACNoC,iBAAkB,SAACZ,IAhEL,SAACA,GACnB,QAAUa,IAANb,EAAiB,CACnB,IAAMc,EAAgB,CACpBC,MAAOf,EAAEgB,WAIX,OAFA7B,GAAc,GACdN,EAAW,IACHmB,EAAEpB,SACR,IAAK,SACHR,GAAS6C,EAAAA,EAAAA,IAAYH,EAAe9B,IACpC,MACF,IAAK,QACHZ,GAAS8C,EAAAA,EAAAA,IAAYJ,IAK3B,CACF,CA+CQK,CAAYnB,EACd,MAIR,C","sources":["layouts/masters/Container.jsx","layouts/masters/Groups.jsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  .header {\r\n    width: 80%;\r\n    height: auto;\r\n    .common-row {\r\n      height: auto;\r\n      margin: 10px 0px;\r\n      padding: 0px;\r\n      .responsive-button {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n      }\r\n    }\r\n    .title {\r\n      display: flex;\r\n      @media screen and (max-width: 528px) {\r\n        justify-content: center;\r\n      }\r\n    }\r\n\r\n    .margin-button {\r\n      margin-right: 10px;\r\n      @media screen and (max-width: 776px) {\r\n        margin-bottom: 5px;\r\n      }\r\n    }\r\n  }\r\n  .body {\r\n    width: 79%;\r\n    display: flex;\r\n    align-items: start;\r\n    justify-content: start;\r\n  }\r\n`;\r\n","//completed\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport { AiOutlinePlus } from \"react-icons/ai\";\r\nimport { CustomButton, GroupColumns, SingleFeildModal } from \"../../components\";\r\nimport { Container } from \"./Container\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getGroups,\r\n  addNewGroup,\r\n  updateGroup,\r\n  deleteGroup,\r\n  groups_clearErrors,\r\n} from \"../../store\";\r\n\r\nconst Groups = () => {\r\n  const dispatch = useDispatch();\r\n  const { groups, loading, group_error } = useSelector((state) => state.groups);\r\n  const [trigger, setTrigger] = useState(\"\");\r\n  const [editValue, setEditValue] = useState(\"\");\r\n  const [id, setId] = useState(0);\r\n  let temp = [];\r\n\r\n  const [show_modal, setShow_Modal] = useState(false);\r\n  useEffect(() => {\r\n    dispatch(getGroups());\r\n    if (group_error) {\r\n      console.log(group_error);\r\n      dispatch(groups_clearErrors());\r\n    }\r\n  }, [dispatch]);\r\n\r\n  const handleEdit = (name, id) => {\r\n    setEditValue(name);\r\n    setId(id);\r\n    setTrigger(\"isEdit\");\r\n    setShow_Modal(true);\r\n  };\r\n  const handleDelete = (e) => {\r\n    dispatch(deleteGroup(e));\r\n  };\r\n\r\n  const handleModal = (e) => {\r\n    if (e !== undefined) {\r\n      const group_payload = {\r\n        title: e.new_value,\r\n      };\r\n      setShow_Modal(false);\r\n      setTrigger(\"\");\r\n      switch (e.trigger) {\r\n        case \"isEdit\":\r\n          dispatch(updateGroup(group_payload, id));\r\n          break;\r\n        case \"isAdd\":\r\n          dispatch(addNewGroup(group_payload));\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <Container>\r\n      <Row className=\"header\">\r\n        <Row className=\"common-row\">\r\n          <Col className=\"title\">\r\n            <h1>Groups</h1>\r\n          </Col>\r\n          <Col className={\"responsive-button\"}>\r\n            <CustomButton\r\n              type={\"normal textnormal margin-button\"}\r\n              width=\"180px\"\r\n              height=\"40px\"\r\n              onClick={() => {\r\n                setShow_Modal(true);\r\n                setTrigger(\"isAdd\");\r\n              }}\r\n            >\r\n              <AiOutlinePlus fontSize={\"1.2rem\"} /> Add Groups\r\n            </CustomButton>\r\n          </Col>\r\n        </Row>\r\n      </Row>\r\n      <Row className=\"body\">\r\n        <GroupColumns\r\n          handleDelete={(e) => {\r\n            handleDelete(e);\r\n          }}\r\n          handleEdit={(name, id) => {\r\n            handleEdit(name, id);\r\n          }}\r\n          rows={!loading ? groups : temp}\r\n          pending={loading}\r\n        />\r\n      </Row>\r\n      <SingleFeildModal\r\n        show={show_modal}\r\n        onHide={() => {\r\n          setShow_Modal(false);\r\n          setTrigger(\"\");\r\n        }}\r\n        txt={\"Groups\"}\r\n        feild_name={\"Group Name\"}\r\n        trigger={trigger}\r\n        value_input={editValue}\r\n        data={groups}\r\n        onHandleCallBack={(e) => {\r\n          handleModal(e);\r\n        }}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Groups;\r\n"],"names":["Container","styled","dispatch","useDispatch","useSelector","state","groups","loading","group_error","useState","trigger","setTrigger","editValue","setEditValue","id","setId","show_modal","setShow_Modal","useEffect","getGroups","console","log","groups_clearErrors","className","type","width","height","onClick","fontSize","handleDelete","e","deleteGroup","handleEdit","name","rows","pending","show","onHide","txt","feild_name","value_input","data","onHandleCallBack","undefined","group_payload","title","new_value","updateGroup","addNewGroup","handleModal"],"sourceRoot":""}